// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shekshuev/gophkeeper/internal/models"
)

// MockDatabaseChecker is a mock of DatabaseChecker interface.
type MockDatabaseChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseCheckerMockRecorder
}

// MockDatabaseCheckerMockRecorder is the mock recorder for MockDatabaseChecker.
type MockDatabaseCheckerMockRecorder struct {
	mock *MockDatabaseChecker
}

// NewMockDatabaseChecker creates a new mock instance.
func NewMockDatabaseChecker(ctrl *gomock.Controller) *MockDatabaseChecker {
	mock := &MockDatabaseChecker{ctrl: ctrl}
	mock.recorder = &MockDatabaseCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseChecker) EXPECT() *MockDatabaseCheckerMockRecorder {
	return m.recorder
}

// CheckDBConnection mocks base method.
func (m *MockDatabaseChecker) CheckDBConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBConnection indicates an expected call of CheckDBConnection.
func (mr *MockDatabaseCheckerMockRecorder) CheckDBConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBConnection", reflect.TypeOf((*MockDatabaseChecker)(nil).CheckDBConnection))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user models.CreateUserDTO) (*models.ReadAuthUserDataDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.ReadAuthUserDataDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByUserName mocks base method.
func (m *MockUserRepository) GetUserByUserName(ctx context.Context, userName string) (*models.ReadAuthUserDataDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", ctx, userName)
	ret0, _ := ret[0].(*models.ReadAuthUserDataDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockUserRepositoryMockRecorder) GetUserByUserName(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockUserRepository)(nil).GetUserByUserName), ctx, userName)
}
